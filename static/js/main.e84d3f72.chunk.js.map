{"version":3,"sources":["components/SelectParty.js","components/ElectionForm.js","components/ShowScore.js","App.js","serviceWorker.js","index.js","img/partys/Party01.jpg","img/partys/Party02.jpg","img/partys/Party03.jpg","img/partys/Party04.jpg","img/partys/Party05.jpg","img/partys/Party06.jpg","img/partys/Party07.jpg","img/cmt-logo-whiteRoundBG-01.png"],"names":["SelectParty","props","stdInfo","id","name","room","isChoose","useState","partyType","setPartyType","imgSrc","party01","party02","party03","party04","party05","party06","party07","Container","className","push","to","undefined","Row","Col","class","map","value","index","key","type","alt","onChange","e","target","src","xs","Form","onSubmit","preventDefault","console","log","Swal","fire","icon","title","text","Button","variant","Badge","style","color","ElectionForm","stdType","setStdType","stdId","setStdId","setStdInfo","isLoading","setIsLoading","emptyForm","fluid","marginTop","size","Check","inline","label","axios","get","then","res","data","result","catch","err","Control","maxLength","placeholder","ShowScore","logo","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.e84d3f72.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Row, Col, Badge, Form, Button } from \"react-bootstrap\";\nimport { Redirect } from \"react-router-dom\";\nimport party01 from \"../img/partys/Party01.jpg\";\nimport party02 from \"../img/partys/Party02.jpg\";\nimport party03 from \"../img/partys/Party03.jpg\";\nimport party04 from \"../img/partys/Party04.jpg\";\nimport party05 from \"../img/partys/Party05.jpg\";\nimport party06 from \"../img/partys/Party06.jpg\";\nimport party07 from \"../img/partys/Party07.jpg\";\nimport Swal from \"sweetalert2\";\n\nconst SelectParty = (props) => {\n  const { id, name, room, isChoose } = props.stdInfo;\n  const [partyType, setPartyType] = useState(\"\");\n\n  const imgSrc = [\n    party01,\n    party02,\n    party03,\n    party04,\n    party05,\n    party06,\n    party07,\n  ];\n\n  const submitParyHandler = (e) => {\n    e.preventDefault();\n    console.log(partyType);\n    if (partyType === null || partyType === \"\" || partyType === undefined) {\n      Swal.fire({\n        icon: \"warning\",\n        title: \"กรุณาตรวจสอบ\",\n        text: \"กรุณาเลือกพรรคที่ต้องการ\",\n      });\n    }\n  };\n\n  return (\n    <Container className=\"mt-5\">\n      {isChoose ? (\n        <Redirect push to=\"/\" />\n      ) : id !== undefined ? (\n        <Container>\n          <Row>\n            <Col>\n              <h5>รหัสนักศึกษา {id}</h5>\n            </Col>\n            <Col>\n              <h5>ชื่อ {name}</h5>\n            </Col>\n            <Col>\n              <h5>\n                {props.stdInfo.class} {room}\n              </h5>\n            </Col>\n          </Row>\n\n          <Row className=\"mt-5\">\n            <Col>\n              <h2>กรุณาเลือกพรรคที่ต้องการ</h2>\n            </Col>\n          </Row>\n\n          <Row className=\"show-party\">\n            {imgSrc.map((value, index) => {\n              return (\n                <label key={index} className=\"list-party\">\n                  <input\n                    type=\"radio\"\n                    name=\"test\"\n                    value={index + 1}\n                    alt={\"partys image\"}\n                    onChange={(e) => setPartyType(e.target.value)}\n                  />\n                  <img src={value} />\n                </label>\n              );\n            })}\n          </Row>\n\n          <Row className=\"justify-content-center align-items-center m-5\">\n            <Col xs={6}>\n              <Form onSubmit={submitParyHandler}>\n                <Button variant=\"primary\" type=\"submit\">\n                  ยืนยัน\n                </Button>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      ) : (\n        <Badge variant=\"secondary\" className=\"p-2\">\n          <h1 style={{ color: \"white\" }}>กรุณากรอกรหัสนักศึกษา</h1>\n        </Badge>\n      )}\n    </Container>\n  );\n};\n\nexport default SelectParty;\n","import React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport SelectParty from \"./SelectParty\";\nimport { Ring } from \"react-spinners-css\";\n\nconst ElectionForm = () => {\n  const [stdType, setStdType] = useState(\"\");\n  const [stdId, setStdId] = useState(\"\");\n  const [stdInfo, setStdInfo] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const emptyForm = () => {\n    setStdInfo({});\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    if (stdType && stdId) {\n      axios\n        .get(`https://cmt-election.herokuapp.com/api/std/${stdId}/${stdType}`)\n        .then((res) => {\n          if (res.data[0].isChoose) {\n            setIsLoading(false);\n            setStdId(\"\");\n            setStdType(\"\");\n            Swal.fire({\n              icon: \"warning\",\n              title: \"คำเตือน\",\n              text: \"นักศึกษาได้ทำการเลือกไปแล้ว\",\n            }).then((result) => {\n              emptyForm();\n            });\n          } else {\n            setIsLoading(false);\n            setStdInfo(res.data[0]);\n            setStdId(\"\");\n            setStdType(\"\");\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          setIsLoading(false);\n          Swal.fire({\n            icon: \"error\",\n            title: \"เกิดข้อผิดพลาด\",\n            text: \"กรุณาลองใหม่อีกครั้งหรือติดต่อผู้ดูแล\",\n          }).then((result) => {\n            emptyForm();\n            setStdId(\"\");\n            setStdType(\"\");\n          });\n        });\n    } else {\n      setIsLoading(false);\n      Swal.fire({\n        icon: \"info\",\n        title: \"กรุณาตรวจสอบ\",\n        text: \"กรุณากรอกข้อมูลให้ครบ\",\n      });\n    }\n  };\n\n  return (\n    <Container fluid className=\"mt-5 text-center\">\n      {isLoading ? (\n        <Container style={{ marginTop: \"3rem\" }}>\n          <Ring size={300} color=\"#282c34\" />\n        </Container>\n      ) : (\n        <Container className=\"bg-white\">\n          <Row className=\"justify-content-center align-items-center\">\n            <Col xs={6}>\n              <Form.Check\n                inline\n                label=\"ฝั่งพาณิชย์\"\n                type=\"radio\"\n                name=\"stdType\"\n                value={stdType}\n                onChange={() => setStdType(\"C\")}\n              />\n              <Form.Check\n                inline\n                label=\"ฝั่งเมโทร\"\n                type=\"radio\"\n                name=\"stdType\"\n                value={stdType}\n                onChange={() => setStdType(\"M\")}\n              />\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center align-items-center mt-2\">\n            <Col xs={6}>\n              <Form onSubmit={submitHandler}>\n                <Form.Control\n                  type=\"text\"\n                  maxLength={7}\n                  placeholder=\"กรุณากรอกรหัสนักศึกษา\"\n                  value={stdId}\n                  onChange={(e) => setStdId(e.target.value)}\n                />\n                <Button variant=\"primary\" type=\"submit\" className=\"mt-2\">\n                  ยืนยัน\n                </Button>\n              </Form>\n            </Col>\n          </Row>\n          <SelectParty stdInfo={stdInfo} />\n        </Container>\n      )}\n    </Container>\n  );\n};\n\nexport default ElectionForm;\n","import React from \"react\";\nimport logo from \"../img/cmt-logo-whiteRoundBG-01.png\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nconst ShowScore = () => {\n  return (\n    <Container className=\"md-5 text-center\">\n      <Row className=\"justify-content-center align-items-center\">\n        <Col>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </Col>\n      </Row>\n\n      <Row className=\"mt-3\">\n        <Col>\n          <h2>การเลือกตั้งองค์การนักศึกษา ปีการศึกษา 2020</h2>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ShowScore;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport ElectionForm from \"./components/ElectionForm\";\nimport SelectParty from \"./components/SelectParty\";\nimport ShowScore from \"./components/ShowScore\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route>\n        <header className=\"App-header\">\n          <ShowScore />\n        </header>\n\n        <Route exact path=\"/\" component={ElectionForm} />\n        <Route path=\"/select-party\" component={SelectParty} />\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Party01.9d3bf71b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Party02.902f5dd1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Party03.f3f56632.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Party04.79201a49.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Party05.66b15a43.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Party06.5fff8cc0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Party07.03f5225f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cmt-logo-whiteRoundBG-01.63b80b3c.png\";"],"sourceRoot":""}